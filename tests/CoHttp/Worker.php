<?php
namespace Workerfy\Tests\CoHttp;

use Workerfy\Tests\Make;

class Worker extends \Workerfy\AbstractProcess {

    protected $server;

    public function init($name = 'bingcool', int $clientId = 1)
    {
       var_dump($name ?? '', $clientId);
       $redis = Make::makeRedis();
       \Common\Library\Uuid\UuidManager::getInstance($redis, 'uuid-key')->tickPreBatchGenerateIds(2,1000);
    }

    public function run() {

        $server = new \Co\Http\Server("*", 9502, false, true);

        $server->handle('/', function ($request, $response) {
            if($request->server['request_uri'] == '/favicon.ico') {
                return $response->end();
            }

            $str ='{"name":"bingcool"}';

            if(json_validate($str, $decodeData))
            {
                var_dump($decodeData);
            }

            $type = $request->get['type'] ?? 0;
            go(function () use($request, $response, $type) {
                if($type == 1)
                {
                    \Co\System::sleep(6);
                }

                $cid = \Co::getCid();
                $workerId = $this->getProcessWorkerId();
                var_dump("workerId=".$workerId);
                $response->end("Index-cid=$cid,workerId=$workerId"."-".rand(1,1000));
            });
        });

        $server->handle('/test', function ($request, $response) {
            var_dump("ggggggggggggg");
            $response->end("<h1>Test</h1>");
        });

        $server->handle('/stop', function ($request, $response) use ($server) {
            $response->end("<h1>Stop</h1>");
            $server->shutdown();

            $this->reboot(1);
        });

        $server->handle('/getUuids', function ($request, $response) use ($server) {
            $redis = Make::makeRedis();
            $ids = \Common\Library\Uuid\UuidManager::getInstance()->getIncrIds($redis, 10);
            var_export($ids);
            $response->end("<h1>Test</h1>");
        });

        $server->start();
    }

    public function onShutDown()
    {
        parent::onShutDown(); // TODO: Change the autogenerated stub
        //var_dump("shutdown--");
    }

    public function onHandleException(\Throwable $throwable, array $context = [])
    {
        parent::onHandleException($throwable); // TODO: Change the autogenerated stub
        var_dump($throwable->getMessage());
    }

//    public function __destruct()
//    {
//        var_dump("destruct");
//    }
}