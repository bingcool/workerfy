<?php
namespace Workerfy\Tests\Daemon;

use Workerfy\ProcessManager;
use PDO;

class Worker extends \Workerfy\AbstractProcess {

    public function init() {
        defer(function() {
            var_dump("expression");
        });
        \Swoole\Coroutine::set([
            'max_coroutine' => 3000
        ]);
    }

	public function run() {
	    $start_time = time();
		while(true) {
		    if($this->isRebooting() || $this->isExiting()) {
                return;
            }

            if($this->getCurrentRunCoroutineNum() >= 2) {
                var_dump("max CurrentRunCoroutineNum");
                //sleep(3);
                continue;
            }
			// var_dump(date("Y-m-d H:i:s"));
			// go(function() {
			// 	sleep(3);
			// });
			// var_dump(date("Y-m-d H:i:s"));
		    //var_dump("jjjjj");
            $pid = ProcessManager::getInstance()->getPidByName($this->getProcessName(), $this->getProcessWorkerId());
		    \Co::sleep(2);

		    var_dump("worker_id:".$this->getProcessWorkerId());

		    sleep(1);
		    go(function () {

		        sleep(2);
		        var_dump("coroutine");
            });

            go(function () {
                sleep(3);
                var_dump("coroutine2");
            });
            //var_dump(date("Y-m-d H:i:s"));
//		    if(time() -$start_time > 1) {
//               break;
//            }
            if($this->getProcessWorkerId() == 0) {
                $this->getCurrentRunCoroutineNum();
                $this->test = 2;
                $processManager = \Workerfy\processManager::getInstance();
                $to_process = $processManager->getProcessByName('worker', 0);
                $test = $to_process->test;
                var_dump($test);
            }
//            if($this->getProcessWorkerId() == 1) {
//                $this->reboot();
//            }
            //var_dump("run start-".rand(1,1000),'cid-'.\Co::getCid());
        }

        //$this->writeByProcessName(ProcessManager::getInstance()->getMasterWorkerName(), 'hello hhhhhhhh');
        if($this->getProcessWorkerId() == 0) {
            $this->writeToMasterProcess('worker', 'hello hhhhhhhh', 1);

        }


        //$this->exit();
        //$this->reboot();
	}

	public function onShutDown() {
        //parent::onShutDown(); // TODO: Change the autogenerated stub
        var_dump("process shutdown-".$this->getProcessName().$this->getProcessWorkerId().'---cid:'.\Co::getCid());
        //var_dump("children-process shutdown,pid={$this->getPid()}, peocess_name={$this->getProcessName()}.'@'.{$this->getProcessWorkerId()}");
    }

    public function onPipeMsg($msg, string $from_process_name, int $from_process_worker_id, bool $is_proxy_by_master) {
	    var_dump('msg-'.$msg.'----worker_id-'.$this->getProcessWorkerId().'-from-worker_id:'.$from_process_worker_id);
    }

    public function handleException($throwable) {
	    var_dump($throwable->getMessage());
    }

}