<?php
namespace Workerfy\Tests\UuidService;

use Workerfy\AbstractProcess;
use Common\Library\Uuid\UuidManager;

class Worker extends AbstractProcess {

    protected $isPredisDriver = false;

    public function init(int $driver = 0)
    {
        if($driver <=0 )
        {
            $this->isPredisDriver = true;
        }

        // 创建产生uuid的poolIds的定时器
        $redis = $this->getRedis();
        \Common\Library\Uuid\UuidManager::getInstance($redis, 'uuid-key')->tickPreBatchGenerateIds(2,1);
    }

    public function run() {

        $server = new \Co\Http\Server("*", 9502, false, true);
        $total = 0;

        // 直接连接redis产生ids
        $server->handle('/generaUuid', function ($request, $response) use(&$total) {
            try {
                // 达到一次请求次数，重启
                if($total >= 200000)
                {
                    $this->reboot(1);
                }

                // 模拟处理业务
                $redis = $this->getRedis();
                $redisIncrement = new \Common\Library\Uuid\UuidIncrement($redis,'order_incr_id');
                $uuid = $redisIncrement->getIncrId();

                ++$total;

                //sleep(5);
                /**
                 * @var \Swoole\Http\Response $response
                 */
                $response->end(json_encode([
                    'id' => $uuid
                ]));

            }catch (\Throwable $e)
            {
                $this->onHandleException($e);
            }

        });

        // 预产生poolIds模式产生
        $server->handle('/Uuid/getUuid', function ($request, $response) use(&$total) {
            try {
                // 达到一次请求次数，重启
                if($total >= 200000)
                {
                    $this->reboot(1);
                }

                // 模拟处理业务
                $redis = $this->getRedis();
                $ids = UuidManager::getInstance()->getIncrIds($redis, 500);

                ++$total;

                //sleep(5);
                /**
                 * @var \Swoole\Http\Response $response
                 */
                $response->end(json_encode($ids));

            }catch (\Throwable $e)
            {
                $this->onHandleException($e);
            }

        });

        $server->start();
    }

    public function getRedis()
    {
        return \Workerfy\Tests\Make::makePredis();
    }

    public function onShutDown()
    {
        parent::onShutDown(); // TODO: Change the autogenerated stub

    }

    public function onHandleException(\Throwable $throwable, array $context = [])
    {
        parent::onHandleException($throwable); // TODO: Change the autogenerated stub
        var_dump($throwable->getMessage(), $throwable->getTraceAsString());
    }
}